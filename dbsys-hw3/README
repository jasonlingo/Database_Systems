600.416 Homework 3

Question 4

To evaluate the performance of different optimizer, we compare the time for optimizing the same query. The queries being tested contain join plans of size 2, 4, 6, 8. The relations are all simple relations with name like "A", "B" and "C" and consist of relations with triples of integers. We didn't test join plan with larger size because it takes too long to optimize such queries.

Join size 2
Original query
Project[3,cost=854.00](projections={'a1': ('a1', 'int')})
  BNLJoin[2,cost=764.00](expr='b1 == a1')
    TableScan[1,cost=20.00](B)
    TableScan[0,cost=20.00](A)

Optimizer
Running time:  0.2255713939666748
Project[3,cost=864.00](projections={'a1': ('a1', 'int')})
  BNLJoin[6,cost=764.00](expr='b1 == a1')
    TableScan[0,cost=20.00](A)
    TableScan[1,cost=20.00](B)

GreedyOptimizer
Running time:  0.21381831169128418
Project[3,cost=864.00](projections={'a1': ('a1', 'int')})
  BNLJoin[10,cost=764.00](expr='b1 == a1')
    TableScan[0,cost=20.00](A)
    TableScan[1,cost=20.00](B)

BushyOptimizer
Running time:  0.1771094799041748
Project[3,cost=764.00](projections={'a1': ('a1', 'int')})
  BNLJoin[15,cost=764.00](expr='b1 == a1')
    TableScan[1,cost=20.00](B)
    TableScan[0,cost=20.00](A)


Join size 4
Original query
Project[25,cost=1587.00](projections={'a1': ('a1', 'int')})
  BNLJoin[24,cost=1587.00](expr='c1==d1')
    TableScan[23,cost=20.00](D)
    BNLJoin[22,cost=1258.00](expr='c1 == b1')
      TableScan[21,cost=20.00](C)
      BNLJoin[20,cost=764.00](expr='b1 == a1')
        TableScan[19,cost=20.00](B)
        TableScan[18,cost=20.00](A)

Optimizer
Running time:  94.17915511131287
Project[25,cost=844.00](projections={'a1': ('a1', 'int')})
  NLJoin[99,cost=844.00](expr='b1 == a1')
    TableScan[18,cost=20.00](A)
    BNLJoin[64,cost=804.00](expr='c1==d1')
      TableScan[21,cost=20.00](C)
      BNLJoin[44,cost=764.00](expr='True')
        TableScan[19,cost=20.00](B)
        TableScan[23,cost=20.00](D)

GreedyOptimizer
Running time:  13.36326813697815
Project[25,cost=1528.00](projections={'a1': ('a1', 'int')})
  BNLJoin[148,cost=1528.00](expr='b1 == a1')
    BNLJoin[128,cost=764.00](expr='True')
      TableScan[21,cost=20.00](C)
      TableScan[18,cost=20.00](A)
    BNLJoin[140,cost=764.00](expr='True')
      TableScan[19,cost=20.00](B)
      TableScan[23,cost=20.00](D)

BushyOptimizer
Running time:  74.12766575813293
Project[25,cost=844.00](projections={'a1': ('a1', 'int')})
  NLJoin[226,cost=844.00](expr='True')
    TableScan[23,cost=20.00](D)
    NLJoin[176,cost=804.00](expr='True')
      TableScan[21,cost=20.00](C)
      BNLJoin[165,cost=764.00](expr='b1 == a1')
        TableScan[18,cost=20.00](A)
        TableScan[19,cost=20.00](B)

Join size 6
Original query
Project[11,cost=1943.00](projections={'a1': ('a1', 'int')})
  BNLJoin[10,cost=1933.00](expr='e1 == f1')
    TableScan[9,cost=20.00](F)
    BNLJoin[8,cost=1746.00](expr='d1 == e1')
      TableScan[7,cost=20.00](E)
      BNLJoin[6,cost=1515.00](expr='d1 == c1')
        TableScan[5,cost=20.00](D)
        BNLJoin[4,cost=1217.00](expr='c1 == b1')
          TableScan[3,cost=20.00](C)
          BNLJoin[2,cost=764.00](expr='b1 == a1')
            TableScan[1,cost=20.00](B)
            TableScan[0,cost=20.00](A)

Optimizer
Running time:  125.0385537147522
Project[11,cost=924.00](projections={'a1': ('a1', 'int')})
  NLJoin[373,cost=924.00](expr='b1 == a1')
    TableScan[0,cost=20.00](A)
    NLJoin[353,cost=884.00](expr='c1 == b1')
      TableScan[1,cost=20.00](B)
      NLJoin[257,cost=844.00](expr='d1 == c1')
        TableScan[3,cost=20.00](C)
        BNLJoin[110,cost=804.00](expr='e1 == f1')
          TableScan[9,cost=20.00](F)
          BNLJoin[58,cost=764.00](expr='d1 == e1')
            TableScan[7,cost=20.00](E)
            TableScan[5,cost=20.00](D)

GreedyOptimizer
Running time:  40.43926644325256
Project[11,cost=2292.00](projections={'a1': ('a1', 'int')})
  NLJoin[443,cost=2292.00](expr='d1 == c1')
    BNLJoin[386,cost=764.00](expr='c1 == b1')
      TableScan[3,cost=20.00](C)
      TableScan[1,cost=20.00](B)
    NLJoin[433,cost=1528.00](expr='e1 == f1')
      BNLJoin[406,cost=764.00](expr='True')
        TableScan[0,cost=20.00](A)
        TableScan[9,cost=20.00](F)
      BNLJoin[424,cost=764.00](expr='d1 == e1')
        TableScan[5,cost=20.00](D)
        TableScan[7,cost=20.00](E)


Exercise 5.

Query explanations:

Query 1.
    Query plan explain before optimization:
    Project[3,cost=12030.00](projections={'revenue': ('revenue', 'float')})
      GroupBy[2,cost=12025.00](groupSchema=groupKey[(ONE,int)], aggSchema=groupBy[(revenue,float)])
        Select[1,cost=12010.00](predicate='(L_SHIPDATE >= 19940101) and (L_SHIPDATE < 19950101) and (0.06 - 0.01 <= L_DISCOUNT <= 0.06 + 0.01) and (L_QUANTITY < 24)')
          TableScan[0,cost=6005.00](lineitem)

    Query plan explain after optimization:
    Project[3,cost=12030.00](projections={'revenue': ('revenue', 'float')})
      GroupBy[2,cost=12025.00](groupSchema=groupKey[(ONE,int)], aggSchema=groupBy[(revenue,float)])
        Select[1,cost=12010.00](predicate='(L_SHIPDATE >= 19940101) and (L_SHIPDATE < 19950101) and (0.06 - 0.01 <= L_DISCOUNT <= 0.06 + 0.01) and (L_QUANTITY < 24)')
          TableScan[0,cost=6005.00](lineitem)

Query 2.
    Query plan explain before optimization:
    Project[10,cost=18587.00](projections={'promo_revenue': ('promo_revenue', 'float')})
      GroupBy[9,cost=18587.00](groupSchema=groupKey[(ONE,int)], aggSchema=groupBy[(promo_revenue,float)])
        Select[8,cost=18587.00](predicate='L_SHIPDATE >= 19950901 and L_SHIPDATE < 19951001')
          BNLJoin[7,cost=18487.00](expr='L_PARTKEY == P_PARTKEY')
            TableScan[6,cost=200.00](part)
            TableScan[5,cost=6005.00](lineitem)

    Query plan explain after optimization:            
    Project[10,cost=12410.00](projections={'promo_revenue': ('promo_revenue', 'float')})
      GroupBy[9,cost=12410.00](groupSchema=groupKey[(ONE,int)], aggSchema=groupBy[(promo_revenue,float)])
        NLJoin[13,cost=12410.00](expr='L_PARTKEY == P_PARTKEY')
          TableScan[6,cost=200.00](part)
          Select[11,cost=12010.00](predicate='(L_SHIPDATE >= 19950901) and (L_SHIPDATE < 19951001)')
            TableScan[5,cost=6005.00](lineitem)

Query 3. 
    Query plan explain before optimization:
    Project[24,cost=15700.00](projections={'o_shippriority': ('O_SHIPPRIORITY', 'int'), 'revenue': ('revenue', 'float'), 'l_orderkey': ('L_ORDERKEY', 'int'), 'o_orderdate': ('O_ORDERDATE', 'int')})
      GroupBy[23,cost=15700.00](groupSchema=groupKey[(L_ORDERKEY,int),(O_ORDERDATE,int),(O_SHIPPRIORITY,int)], aggSchema=groupAgg[(revenue,float)])
        Select[22,cost=15700.00](predicate='C_MKTSEGMENT == 'BUILDING' and O_ORDERDATE < 19950315 and L_SHIPDATE > 19950315')
          BNLJoin[21,cost=15580.00](expr='O_ORDERKEY == L_ORDERKEY')
            TableScan[20,cost=6005.00](lineitem)
            BNLJoin[19,cost=3478.00](expr='C_CUSTKEY == O_CUSTKEY')
              TableScan[18,cost=1500.00](orders)
              TableScan[17,cost=150.00](customer)
    
    Query plan explain after optimization: 
    Project[24,cost=16216.00](projections={'o_shippriority': ('O_SHIPPRIORITY', 'int'), 'revenue': ('revenue', 'float'), 'l_orderkey': ('L_ORDERKEY', 'int'), 'o_orderdate': ('O_ORDERDATE', 'int')})
      GroupBy[23,cost=16216.00](groupSchema=groupKey[(L_ORDERKEY,int),(O_ORDERDATE,int),(O_SHIPPRIORITY,int)], aggSchema=groupAgg[(revenue,float)])
        BNLJoin[43,cost=16216.00](expr='O_ORDERKEY == L_ORDERKEY')
          Select[28,cost=12010.00](predicate='(L_SHIPDATE > 19950315)')
            TableScan[20,cost=6005.00](lineitem)
          BNLJoin[41,cost=4206.00](expr='C_CUSTKEY == O_CUSTKEY')
            Select[27,cost=3000.00](predicate='(O_ORDERDATE < 19950315)')
              TableScan[18,cost=1500.00](orders)
            Select[26,cost=300.00](predicate='(C_MKTSEGMENT == 'BUILDING')')
              TableScan[17,cost=150.00](customer)   


Query 4. 
    Query plan explain before optimization: 
    Project[14,cost=15796.00](projections={'c_phone': ('C_PHONE', 'char(15)'), 'c_acctbal': ('C_ACCTBAL', 'float'), 'c_name': ('C_NAME', 'char(25)'), 'c_address': ('C_ADDRESS', 'char(40)'), 'c_custkey': ('C_CUSTKEY', 'int'), 'c_comment': ('C_COMMENT', 'char(117)'), 'n_name': ('N_NAME', 'char(25)'), 'revenue': ('revenue', 'float')})
      GroupBy[13,cost=15796.00](groupSchema=groupKey[(C_CUSTKEY,int),(C_NAME,char(25)),(C_ACCTBAL,float),(C_PHONE,char(15)),(N_NAME,char(25)),(C_ADDRESS,char(40)),(C_COMMENT,char(117))], aggSchema=groupAgg[(revenue,float)])
        Select[12,cost=15796.00](predicate='L_RETURNFLAG == 'R' and O_ORDERDATE < 19940101 and O_ORDERDATE >= 19931001')
          BNLJoin[11,cost=15796.00](expr='C_NATIONKEY == N_NATIONKEY')
            TableScan[10,cost=25.00](nation)
            BNLJoin[9,cost=15680.00](expr='L_ORDERKEY == O_ORDERKEY')
              TableScan[8,cost=6005.00](lineitem)
              BNLJoin[7,cost=3478.00](expr='C_CUSTKEY == O_CUSTKEY')
                TableScan[6,cost=1500.00](orders)
                TableScan[5,cost=150.00](customer)

    Query plan explain after optimization: 
    Project[14,cost=15404.00](projections={'c_phone': ('C_PHONE', 'char(15)'), 'c_acctbal': ('C_ACCTBAL', 'float'), 'c_name': ('C_NAME', 'char(25)'), 'c_address': ('C_ADDRESS', 'char(40)'), 'c_custkey': ('C_CUSTKEY', 'int'), 'c_comment': ('C_COMMENT', 'char(117)'), 'n_name': ('N_NAME', 'char(25)'), 'revenue': ('revenue', 'float')})
      GroupBy[13,cost=15404.00](groupSchema=groupKey[(C_CUSTKEY,int),(C_NAME,char(25)),(C_ACCTBAL,float),(C_PHONE,char(15)),(N_NAME,char(25)),(C_ADDRESS,char(40)),(C_COMMENT,char(117))], aggSchema=groupAgg[(revenue,float)])
        NLJoin[70,cost=15404.00](expr='C_NATIONKEY == N_NATIONKEY')
          TableScan[5,cost=150.00](customer)
          BNLJoin[59,cost=15104.00](expr='L_ORDERKEY == O_ORDERKEY')
            Select[18,cost=12010.00](predicate='(L_RETURNFLAG == 'R')')
              TableScan[8,cost=6005.00](lineitem)
            BNLJoin[27,cost=3094.00](expr='True')
              Select[17,cost=3000.00](predicate='(O_ORDERDATE < 19940101) and (O_ORDERDATE >= 19931001)')
                TableScan[6,cost=1500.00](orders)
              TableScan[10,cost=25.00](nation)

Query 5 . 
We have no explain for Query 5 because it took very long time to execute it.
